apply plugin: 'com.android.application'

android {
    namespace "com.quantum.Batwave"
    compileSdk rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.quantum.Batwave"
        minSdkVersion 28
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        aaptOptions {
            // Ignore unnecessary assets
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

repositories {
    flatDir {
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation "androidx.core:core:1.16.0"
    implementation "androidx.media:media:1.7.0"


    // Remove ALL com.android.support dependencies, even transitive ones
    implementation(project(':capacitor-android')) {
        exclude group: 'com.android.support'
    }

    implementation(project(':capacitor-cordova-android-plugins')) {
        exclude group: 'com.android.support'
    }

    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
}

// ðŸš« Force resolution to AndroidX and exclude old support libraries
configurations.all {
    resolutionStrategy {
        force 'androidx.core:core:1.16.0'  // âœ… Match the version
        force 'androidx.versionedparcelable:versionedparcelable:1.1.1'
    }
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
